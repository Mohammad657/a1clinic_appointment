# Uncomment this line to define a global platform for your project
platform :ios, '14.0'
# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
flutter_ios_podfile_setup

target 'Runner' do
  # Important: Use static_framework for Firebase
  use_frameworks! :linkage => :static
  use_modular_headers!
  
  # Explicitly define Firebase pods
  pod 'Firebase', :modular_headers => true
  pod 'FirebaseCore', :modular_headers => true
  pod 'FirebaseMessaging', :modular_headers => true
  pod 'FirebaseAuth', :modular_headers => true
  pod 'FirebaseFirestore', :modular_headers => true
  pod 'FirebaseStorage', :modular_headers => true
  
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  # Apply Flutter specific settings
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end
  
  # Apply standard configuration to all targets
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      # Set iOS deployment target
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      
      # Set preprocessor definitions for permissions
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
        '$(inherited)',
        'PERMISSION_EVENTS=1',
        'PERMISSION_REMINDERS=1',
        'PERMISSION_CONTACTS=1',
        'PERMISSION_CAMERA=1',
        'PERMISSION_MICROPHONE=1',
        'PERMISSION_SPEECH_RECOGNIZER=1',
        'PERMISSION_PHOTOS=1',
        'PERMISSION_NOTIFICATIONS=1',
        'PERMISSION_MEDIA_LIBRARY=1',
        'PERMISSION_SENSORS=1',
        'PERMISSION_BLUETOOTH=1'
      ]
      
      # Fix for unsupported -G compiler option
      config.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
      
      # Critical: Allow non-modular includes in all Firebase-related modules
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      
      # Ensure all Firebase plugins have module support
      if target.name.start_with?('Firebase') || target.name.include?('firebase_')
        config.build_settings['DEFINES_MODULE'] = 'YES'
        config.build_settings['APPLICATION_EXTENSION_API_ONLY'] = 'NO'
      end
      
      # Additional settings to fix modules
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # Add search paths for Firebase headers
      config.build_settings['HEADER_SEARCH_PATHS'] ||= '$(inherited)'
      config.build_settings['HEADER_SEARCH_PATHS'] << ' "${PODS_ROOT}/Firebase/CoreOnly/Sources"'
      config.build_settings['HEADER_SEARCH_PATHS'] << ' "${PODS_ROOT}/Headers/Public/Firebase"'
    end
  end
  
  # Fix for BoringSSL-GRPC
  installer.pods_project.targets.each do |target|
    if target.name == 'BoringSSL-GRPC'
      target.source_build_phase.files.each do |file|
        if file.settings && file.settings['COMPILER_FLAGS']
          flags = file.settings['COMPILER_FLAGS'].split
          flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
          file.settings['COMPILER_FLAGS'] = flags.join(' ')
        end
      end
    end
  end
  
  # Fix for flutter_localizations package errors
  installer.aggregate_targets.each do |target|
    target.xcconfigs.each do |variant, xcconfig|
      xcconfig_path = target.client_root + target.xcconfig_relative_path(variant)
      IO.write(xcconfig_path, IO.read(xcconfig_path).gsub("DT_TOOLCHAIN_DIR", "TOOLCHAIN_DIR"))
    end
  end
  
  # Update minimum OS version in Info.plist files using pod resources
  Dir.glob(File.join(installer.sandbox.target_support_files_root, "Pods-*/*.plist")).each do |plist|
    next unless File.file?(plist)
    begin
      plist_content = Xcodeproj::Plist.read_from_path(plist)
      if plist_content.is_a?(Hash) && plist_content['MinimumOSVersion'] && plist_content['MinimumOSVersion'].to_f < 12.0
        plist_content['MinimumOSVersion'] = '12.0'
        Xcodeproj::Plist.write_to_path(plist_content, plist)
      end
    rescue StandardError => e
      puts "Warning: Error processing plist file #{plist}: #{e.message}"
    end
  end
end